// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts SET balance = balance + $1 WHERE id = $2 RETURNING id, owner, balance, currency, created_at
`

type AddAccountBalanceParams struct {
	Amount int64
	ID     int64
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (owner, balance, currency) VALUES ($1, $2, $3) RETURNING id, owner, balance, currency, created_at
`

type CreateAccountParams struct {
	Owner    string
	Balance  int64
	Currency string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (account_id, amount) VALUES ($1, $2) RETURNING id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64
	Amount    int64
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (from_account_id, to_account_id, amount) VALUES ($1, $2, $3) RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccountID int64
	ToAccountID   int64
	Amount        int64
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const deleteAllAccounts = `-- name: DeleteAllAccounts :exec
DELETE FROM accounts
`

func (q *Queries) DeleteAllAccounts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllAccounts)
	return err
}

const deleteAllEntries = `-- name: DeleteAllEntries :exec
DELETE FROM entries
`

func (q *Queries) DeleteAllEntries(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllEntries)
	return err
}

const deleteAllTransfers = `-- name: DeleteAllTransfers :exec
DELETE FROM transfers
`

func (q *Queries) DeleteAllTransfers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTransfers)
	return err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM transfers WHERE id = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, balance, currency, created_at FROM accounts WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByOwner = `-- name: GetAccountByOwner :one
SELECT id, owner, balance, currency, created_at FROM accounts WHERE owner = $1
`

func (q *Queries) GetAccountByOwner(ctx context.Context, owner string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByOwner, owner)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, owner, balance, currency, created_at FROM accounts WHERE id = $1 FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getBalanceByIDsForUpdate = `-- name: GetBalanceByIDsForUpdate :one
SELECT balance FROM accounts WHERE id IN ($1, $2) FOR UPDATE
`

type GetBalanceByIDsForUpdateParams struct {
	ID   int64
	ID_2 int64
}

func (q *Queries) GetBalanceByIDsForUpdate(ctx context.Context, arg GetBalanceByIDsForUpdateParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBalanceByIDsForUpdate, arg.ID, arg.ID_2)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const getBalanceById = `-- name: GetBalanceById :one
SELECT balance FROM accounts WHERE id = $1
`

func (q *Queries) GetBalanceById(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBalanceById, id)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const getBalanceByIdForUpdate = `-- name: GetBalanceByIdForUpdate :one
SELECT balance FROM accounts WHERE id = $1 FOR UPDATE
`

func (q *Queries) GetBalanceByIdForUpdate(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBalanceByIdForUpdate, id)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const getBalanceByOwner = `-- name: GetBalanceByOwner :one
SELECT balance FROM accounts WHERE owner = $1
`

func (q *Queries) GetBalanceByOwner(ctx context.Context, owner string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBalanceByOwner, owner)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const getBalanceByOwnerForUpdate = `-- name: GetBalanceByOwnerForUpdate :one
SELECT balance FROM accounts WHERE owner = $1 FOR UPDATE
`

func (q *Queries) GetBalanceByOwnerForUpdate(ctx context.Context, owner string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBalanceByOwnerForUpdate, owner)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const getBalanceByOwnersForUpdate = `-- name: GetBalanceByOwnersForUpdate :one
SELECT balance FROM accounts WHERE owner IN ($1, $2) FOR UPDATE
`

type GetBalanceByOwnersForUpdateParams struct {
	Owner   string
	Owner_2 string
}

func (q *Queries) GetBalanceByOwnersForUpdate(ctx context.Context, arg GetBalanceByOwnersForUpdateParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBalanceByOwnersForUpdate, arg.Owner, arg.Owner_2)
	var balance int64
	err := row.Scan(&balance)
	return balance, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, amount, created_at FROM entries WHERE id = $1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers WHERE id = $1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfersByIDs = `-- name: GetTransfersByIDs :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers WHERE from_account_id = $1 AND to_account_id = $2
`

type GetTransfersByIDsParams struct {
	FromAccountID int64
	ToAccountID   int64
}

func (q *Queries) GetTransfersByIDs(ctx context.Context, arg GetTransfersByIDsParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfersByIDs, arg.FromAccountID, arg.ToAccountID)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfersByIDsForUpdate = `-- name: GetTransfersByIDsForUpdate :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers WHERE from_account_id = $1 AND to_account_id = $2 FOR UPDATE
`

type GetTransfersByIDsForUpdateParams struct {
	FromAccountID int64
	ToAccountID   int64
}

func (q *Queries) GetTransfersByIDsForUpdate(ctx context.Context, arg GetTransfersByIDsForUpdateParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfersByIDsForUpdate, arg.FromAccountID, arg.ToAccountID)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner, balance, currency, created_at FROM accounts ORDER BY id LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, amount, created_at FROM entries WHERE account_id = $1 ORDER BY id LIMIT $2 OFFSET $3
`

type ListEntriesParams struct {
	AccountID int64
	Limit     int32
	Offset    int32
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers WHERE from_account_id = $1 OR to_account_id = $1 ORDER BY id LIMIT $2 OFFSET $3
`

type ListTransfersParams struct {
	FromAccountID int64
	Limit         int32
	Offset        int32
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE accounts SET balance = $2 WHERE id = $1 RETURNING id, owner, balance, currency, created_at
`

type UpdateAccountBalanceParams struct {
	ID      int64
	Balance int64
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountBalance, arg.ID, arg.Balance)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
